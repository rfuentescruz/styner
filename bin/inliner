#!/usr/bin/env phantomjs

var fs = require('fs'),
    system = require('system'),
    webpage = require('webpage');

var args = system.args;

var showUsage = function() {
    console.error('Usage: phantomjs ' + args[0] + ' <infile> <outfile> [<width:height>]');
    phantom.exit(3);
};

if (args.length < 3) {
    showUsage();
}

var INFILE = args[1];
var OUTFILE = args[2];

var VIEWPORT_WIDTH = 1280;
var VIEWPORT_HEIGHT = 720;

var DEBUG = false;

if (args[3]) {
    var dimensions = args[3].split(':');

    if (
        dimensions.length == 2 &&
        dimensions[0].match(/^[0-9]+$/) &&
        dimensions[1].match(/^[0-9]+$/)
    ) {
        VIEWPORT_WIDTH = parseInt(dimensions[0]);
        VIEWPORT_HEIGHT = parseInt(dimensions[1]);
    } else {
        console.error('Error: Invalid dimensions');
        showUsage();
    }
}

if (typeof args[4] != 'undefined' && args[4]) {
    DEBUG = true;
}

if (DEBUG) {
    console.debug('Input: ' + INFILE);
    console.debug('Output: ' + OUTFILE);
    console.debug('Viewport Size: ' + VIEWPORT_WIDTH + 'x' + VIEWPORT_HEIGHT);
}

var source = webpage.create();
source.viewportSize = {
    width: VIEWPORT_WIDTH,
    height: VIEWPORT_HEIGHT
};

source.onConsoleMessage = function(msg) {
    console.log(msg);
};

var start = new Date().getTime();

source.open(INFILE, function(status) {
    if (status == 'fail') {
        console.error('Invalid input file');
        phantom.exit(1);
    }

    source.injectJs('../lib/styner.min.js');
    source.evaluate(function() {
        styner.run();
    });

    try {
        fs.write(OUTFILE, source.content, 'w')
    } catch(e) {
        console.error(e);
        phantom.exit(2);
    }
    var end = new Date().getTime();

    if (DEBUG) {
        console.debug(
            'Finished processing in ' + ((end - start) / 1000) + ' seconds'
        );
    }
    phantom.exit(0);
});
